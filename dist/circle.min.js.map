{"version":3,"sources":["circle.js"],"names":["camel2Spinal","str","replace","toLowerCase","spinal2Camel","$1","toUpperCase","dirname","absoluteKey","match","basename","parseAbsoluteKey","key","isFirefox","navigator","userAgent","isEdge","parseExpr","elt","walk","document","createTreeWalker","NodeFilter","SHOW_TEXT","array","node","nextNode","data","push","forEach","replacementNode","createElement","innerHTML","name","parentNode","insertBefore","removeChild","parseBehavior","rootElt","tag","window","circle","behaviorRegistry","querySelectorAll","console","warning","doc","currentScript","ownerDocument","DBNotation","[object Object]","value","expr","substring","scope","TWO_WAYS","ONE_WAY","LITTERAL","EVENT","Databinding","circleElement","this","i","attributes","length","isTwoWays","isOneWay","isEvent","attr","extractModelVar","getAttribute","initScope","setModel","setEvent","extractEventExpr","modelVar","getModelVar","parent","getParent","bindKey","onDigest","askRendering","parentModelValue","getModel","setAttribute","CircleProxyType","CircleElement","HTMLElement","reg","customElements","define","observedAttributes","_oa","oa","oldValue","newValue","handler","parentKey","target","Array","isArray","Proxy","digestId","k","self","digest","deleteProperty","getPrototypeOf","prototype","super","event","model","digestRegistry","templateSelector","constructor","databinding","isRenderingAsked","getRootNode","host","root","attachShadow","mode","myDoc","t","querySelector","clone","importNode","content","appendChild","connectedCallBack","init","setTimeout","render","undefined","index","prefix","startsWith","eval","b","hasModel","CircleBehavior","Circle","Element","Behavior","dependancyInjectionRegistry","Error","stack","di","arguments","o","element","Object","setPrototypeOf","CircleExpr","JSON","stringify"],"mappings":"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","file":"circle.min.js","sourcesContent":["(function () {\r\n\t'use strict';\r\n\r\n\tif (window.circle) { console.warning('circle already loaded'); }\r\n\r\n\t// Firefox and Edge does not understand well currentScript after init.\r\n\t// So we keep this pointer for later.\r\n\tconst doc = document.currentScript.ownerDocument;\r\n\r\n\t/**\r\n\t * Translate a string from CamelCase to spinal-case.\r\n\t * Note: works well with SPECIALCamelCase as well.\r\n\t * \r\n\t * @param {string} str - CamelCase string\r\n\t * @returns spinal-case equivalent string.\r\n\t */\r\n\tfunction camel2Spinal(str) {\r\n\t\t// handle case like JLGStars becoming jlg-stars\r\n\t\tstr = str.replace(/^([A-Z]+)([A-Z][a-z])/g, '$1-$2');\r\n\t\t// then do the traditional conversion to spinal case.\r\n\t\treturn str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n\t}\r\n\r\n\tfunction spinal2Camel(str) {\r\n\t\treturn str.replace(/(-[a-z])/g, function ($1) { return $1.toUpperCase().replace('-', ''); });\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the parent key\r\n\t * Ex: \r\n\t * hello['world']['toto'] becomes hello['world']\r\n\t * hello['world'] becomes hello\r\n\t * hello becomes undefined\r\n\t * \r\n\t * @param {any} absoluteKey \r\n\t * @returns \r\n\t */\r\n\tfunction dirname(absoluteKey) {\r\n\t\tif (absoluteKey.match(/\\[/)) {\r\n\t\t\treturn absoluteKey.replace(/^(.*)\\[[^[]+?\\]$/, '$1');\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the last key\r\n\t * Ex: \r\n\t * hello['world']['toto'] becomes toto\r\n\t * hello['world'] becomes world\r\n\t * hello becomes hello\r\n\t * \r\n\t * @param {any} absoluteKey \r\n\t * @returns \r\n\t */\r\n\tfunction basename(absoluteKey) {\r\n\t\tif (absoluteKey.match(/\\[/)) {\r\n\t\t\treturn absoluteKey.replace(/^.*\\['([^']+)'\\]$/, '$1');\r\n\t\t}\r\n\t\treturn absoluteKey;\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms hello.world[3].foo.bar in hello['world'][3]['foo']['bar']\r\n\t * \r\n\t * \r\n\t * @param {any} key \r\n\t * @returns \r\n\t */\r\n\tfunction parseAbsoluteKey(key) {\r\n\t\treturn key.replace(/\\.([^.]+)/g, '[\\'$1\\']');\r\n\t}\r\n\r\n\t/**\r\n\t * check if the user agent is Firefox\r\n\t * \r\n\t * @returns true if user agent is Firefox, false otherwise.\r\n\t */\r\n\tfunction isFirefox() {\r\n\t\treturn navigator.userAgent.match(/Firefox/) !== null;\r\n\t}\r\n\r\n\t/**\r\n\t * check if the user agent is Microsoft Edge\r\n\t * \r\n\t * @returns true if user agent is Edge, false otherwise.\r\n\t */\r\n\tfunction isEdge() {\r\n\t\treturn navigator.userAgent.match(/Edge/) !== null;\r\n\t}\r\n\r\n\t/**\r\n\t * We want the user be able to easily insert expression like in AngularJS.\r\n\t * But internally, the {{myModelVar}} must be converted to <circle-expr expr=\"[myModelVar]\"></circle-expr>\r\n\t * \r\n\t * @param {any} elt \r\n\t */\r\n\tfunction parseExpr(elt) {\r\n\t\tconst walk = document.createTreeWalker(elt, NodeFilter.SHOW_TEXT, null, false);\r\n\t\tlet array = [];\r\n\t\tfor (let node = walk.nextNode(); node !== null; node = walk.nextNode()) {\r\n\t\t\tif (node.data.match(/{{(.*?)}}/g)) {\r\n\t\t\t\tarray.push(node);\r\n\t\t\t}\r\n\t\t}\r\n\t\tarray.forEach((node) => {\r\n\t\t\tconst replacementNode = document.createElement('span');\r\n\t\t\treplacementNode.innerHTML = node.data.replace(/{{(.*?)}}/g, (match, name) => {\r\n\t\t\t\treturn `<circle-expr expr=\"[${name}]\"></circle-expr>`;\r\n\t\t\t});\r\n\t\t\tconst parentNode = node.parentNode;\r\n\t\t\tparentNode.insertBefore(replacementNode, node);\r\n\t\t\tparentNode.removeChild(node);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction parseBehavior(rootElt) {\r\n\t\tfor (let tag in window.circle.behaviorRegistry) {\r\n\t\t\trootElt.querySelectorAll(`[${tag}]`).forEach(elt => {\r\n\t\t\t\tnew window.circle.behaviorRegistry[tag](elt);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Class in charge of managing the databinding notation:\r\n\t * [] for one way databinding\r\n\t * [[]] for two way databinding\r\n\t * & for event databinding\r\n\t * For internal scope notation (Angular like: '@' for litteral, '<' for simple DB,\r\n\t * '=' for 2 way DB, '&' for event DB)\r\n\t * \r\n\t * @class DBNotation\r\n\t */\r\n\tclass DBNotation {\r\n\t\t/**\r\n\t\t * Tests if the notation is a 2 ways data binding.\r\n\t\t * Notation is for the time being: [[...]]\r\n\t\t * \r\n\t\t * @param {any} value \r\n\t\t * @returns \r\n\t\t */\r\n\t\tstatic isTwoWays(value) {\r\n\t\t\treturn value.match(/^\\[\\[.*\\]\\]$/);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Tests if the notation is a 1 way data binding.\r\n\t\t * Notation is for the time being: [...]\r\n\t\t * \r\n\t\t * @param {any} value \r\n\t\t * @returns \r\n\t\t */\r\n\t\tstatic isOneWay(value) {\r\n\t\t\treturn value.match(/^\\[.*\\]$/);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Test if the notation is a event databinding\r\n\t\t * Notation is for the time being: &...\r\n\t\t * \r\n\t\t * @static\r\n\t\t * @param {any} value \r\n\t\t * @returns \r\n\t\t * @memberof DBNotation\r\n\t\t */\r\n\t\tstatic isEvent(value) {\r\n\t\t\treturn value.match(/^&/);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * removes the [] or [[]].\r\n\t\t * \r\n\t\t * @static\r\n\t\t * @param {any} value \r\n\t\t * @returns \r\n\t\t * @memberof DBNotation\r\n\t\t */\r\n\t\tstatic extractModelVar(value) {\r\n\t\t\tlet expr = value.replace(/^\\[(.*?)\\]$/g, '$1').replace(/^\\[(.*?)\\]$/g, '$1');\r\n\t\t\texpr = parseAbsoluteKey(expr);\r\n\t\t\treturn expr;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Removes the starting &.\r\n\t\t * \r\n\t\t * @static\r\n\t\t * @param {any} value \r\n\t\t * @returns \r\n\t\t * @memberof DBNotation\r\n\t\t */\r\n\t\tstatic extractEventExpr(value) {\r\n\t\t\treturn value.substring(1);\r\n\t\t}\r\n\r\n\t\tstatic get scope() {\r\n\t\t\treturn {\r\n\t\t\t\tTWO_WAYS: '=',\r\n\t\t\t\tONE_WAY: '<',\r\n\t\t\t\tLITTERAL: '@',\r\n\t\t\t\tEVENT: '&'\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tclass Databinding {\r\n\t\tconstructor(circleElement) {\r\n\t\t\tthis.elt = circleElement;\r\n\t\t\tthis.scope = {};\r\n\t\t}\r\n\r\n\t\tinitScope() {\r\n\t\t\tfor (let i = 0; i < this.elt.attributes.length; i++) {\r\n\t\t\t\tconst key = this.elt.attributes[i].name;\r\n\t\t\t\tconst value = this.elt.attributes[i].value;\r\n\t\t\t\tif (DBNotation.isTwoWays(value)) {\r\n\t\t\t\t\tthis.scope[key] = DBNotation.scope.TWO_WAYS;\r\n\t\t\t\t} else if (DBNotation.isOneWay(value)) {\r\n\t\t\t\t\tthis.scope[key] = DBNotation.scope.ONE_WAY;\r\n\t\t\t\t} else if (DBNotation.isEvent(value)) {\r\n\t\t\t\t\tthis.scope[key] = DBNotation.scope.EVENT;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.scope[key] = DBNotation.scope.LITTERAL;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgetModelVar(attr) {\r\n\t\t\treturn DBNotation.extractModelVar(this.elt.getAttribute(attr));\r\n\t\t}\r\n\r\n\t\tconnectedCallBack() {\r\n\t\t\tthis.initScope();\r\n\t\t\tfor (let attr in this.scope) {\r\n\t\t\t\tif (this.scope[attr] === DBNotation.scope.LITTERAL) {\r\n\t\t\t\t\tthis.elt.setModel(spinal2Camel(attr), this.elt.getAttribute(attr));\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.scope[attr] === DBNotation.scope.EVENT) {\r\n\t\t\t\t\tthis.elt.setEvent(spinal2Camel(attr), DBNotation.extractEventExpr(this.elt.getAttribute(attr)));\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst modelVar = this.getModelVar(attr);\r\n\t\t\t\tconst parent = this.elt.getParent();\r\n\t\t\t\tif (parent) {\r\n\t\t\t\t\tparent.bindKey(modelVar, this.elt);\r\n\t\t\t\t}\r\n\t\t\t\tthis.elt.onDigest(modelVar);\r\n\t\t\t}\r\n\t\t\tthis.elt.askRendering();\r\n\t\t}\r\n\r\n\t\tonDigest(key) {\r\n\t\t\tfor (let attr in this.scope) {\r\n\t\t\t\tif (this.scope[attr] === DBNotation.scope.LITTERAL) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tconst modelVar = this.getModelVar(attr);\r\n\t\t\t\tif (modelVar === key) {\r\n\t\t\t\t\tconst parentModelValue = this.elt.getParent().getModel(key);\r\n\t\t\t\t\tthis.elt.setModel(spinal2Camel(attr), parentModelValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.elt.askRendering();\r\n\t\t}\r\n\r\n\t\tdigest(key) {\r\n\t\t\tif (key in this.scope) {\r\n\t\t\t\tif (this.scope[key] === DBNotation.scope.LITTERAL) {\r\n\t\t\t\t\tif (this.elt.getAttribute(key) !== this.elt.getModel(spinal2Camel(key))) {\r\n\t\t\t\t\t\tthis.elt.setAttribute(key, this.elt.getModel(spinal2Camel(key)));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.scope[key] === DBNotation.scope.TWO_WAYS) {\r\n\t\t\t\t\tconst modelVar = this.getModelVar(key);\r\n\t\t\t\t\tthis.elt.getParent().setModel(modelVar, this.elt.getModel(spinal2Camel(key)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.elt.askRendering();\r\n\t\t}\r\n\t}\r\n\r\n\tclass CircleProxyType { }\r\n\r\n\t/**\r\n\t * A component in circle must extends the circle.Element class\r\n\t * which is a pointer on the CircleElement class.\r\n\t * \r\n\t * @class CircleElement\r\n\t * @extends {HTMLElement}\r\n\t */\r\n\tclass CircleElement extends HTMLElement {\r\n\t\tstatic get tag() {\r\n\t\t\treturn camel2Spinal(this.name);\r\n\t\t}\r\n\t\tstatic get reg() {\r\n\t\t\twindow.customElements.define(this.tag, this);\r\n\t\t}\r\n\r\n\t\tstatic get observedAttributes() {\r\n\t\t\treturn this._oa;\r\n\t\t}\r\n\r\n\t\tstatic set oa(value) {\r\n\t\t\tthis._oa = value;\r\n\t\t}\r\n\r\n\t\tattributeChangedCallback(attr, oldValue, newValue) {\r\n\t\t\tthis.setModel(spinal2Camel(attr), newValue);\r\n\t\t}\r\n\t\tconstructor() {\r\n\t\t\tsuper();\r\n\t\t\tconst self = this;\r\n\r\n\t\t\tfunction handler(parentKey) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tset(target, key, value) {\r\n\t\t\t\t\t\tconst absoluteKey = (parentKey) ? `${parentKey}['${key}']` : key;\r\n\t\t\t\t\t\tif (Array.isArray(target)) {\r\n\t\t\t\t\t\t\tif (key === 'length') {\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (value !== null && typeof value === 'object' && !(value instanceof CircleProxyType)) {\r\n\t\t\t\t\t\t\ttarget[key] = new Proxy(value, handler(absoluteKey));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttarget[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcircle.digestId++;\r\n\t\t\t\t\t\t// console.log('%d: %s: update %s to %s',\r\n\t\t\t\t\t\t// \tcircle.digestId, self.constructor.name, absoluteKey, value, circle.stackTrace());\r\n\t\t\t\t\t\tlet k = absoluteKey;\r\n\t\t\t\t\t\twhile (k) {\r\n\t\t\t\t\t\t\tself.digest(k);\r\n\t\t\t\t\t\t\tk = dirname(k);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tdeleteProperty(target, key) {\r\n\t\t\t\t\t\tdelete target[key];\r\n\t\t\t\t\t\tif (Array.isArray(target)) {\r\n\t\t\t\t\t\t\ttarget.length--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcircle.digestId++;\r\n\t\t\t\t\t\t// console.log('%d: %s: delete %s',\r\n\t\t\t\t\t\t// \tcircle.digestId, self.constructor.name, absoluteKey, circle.stackTrace());\r\n\t\t\t\t\t\tself.digest(parentKey);\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetPrototypeOf: function (key) {\r\n\t\t\t\t\t\treturn CircleProxyType.prototype;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tthis.event = {};\r\n\t\t\tthis.model = new Proxy({}, handler());\r\n\t\t\tthis.digestRegistry = {};\r\n\t\t\tthis.templateSelector = '#' + this.constructor.tag;\r\n\t\t\tthis.databinding = new Databinding(this);\r\n\t\t\tthis.isRenderingAsked = false;\r\n\t\t}\r\n\r\n\t\tgetParent() {\r\n\t\t\treturn this.getRootNode().host;\r\n\t\t}\r\n\r\n\t\tconnectedCallback() {\r\n\t\t\tthis.root = this.root || this.attachShadow({\r\n\t\t\t\t// see https://developers.google.com/web/fundamentals/architecture/building-components/shadowdom\r\n\t\t\t\t// Eric B. explain why it is better to use open mode.\r\n\t\t\t\tmode: 'open'\r\n\t\t\t});\r\n\t\t\tthis.myDoc = (isFirefox() || isEdge() || (document.currentScript === null)) ?\r\n\t\t\t\tdoc : document.currentScript.ownerDocument;\r\n\r\n\t\t\tconst t = this.myDoc.querySelector(this.templateSelector);\r\n\t\t\tif (t) {\r\n\t\t\t\tconst clone = document.importNode(t.content, true);\r\n\t\t\t\tparseExpr(clone);\r\n\t\t\t\tthis.root.innerHTML = '';\r\n\t\t\t\tthis.root.appendChild(clone);\r\n\t\t\t\tparseBehavior(this.root);\r\n\t\t\t}\r\n\t\t\tthis.databinding.connectedCallBack();\r\n\t\t\tthis.init();\r\n\t\t}\r\n\r\n\t\tinit() { }\r\n\r\n\t\taskRendering() {\r\n\t\t\tif (!this.isRenderingAsked) {\r\n\t\t\t\tthis.isRenderingAsked = true;\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.render();\r\n\t\t\t\t\tthis.isRenderingAsked = false;\r\n\t\t\t\t}, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trender() { }\r\n\r\n\t\tonDigest(key) {\r\n\t\t\tthis.databinding.onDigest(key);\r\n\t\t}\r\n\t\tbindKey(key, elt) {\r\n\t\t\tconst digestRegistry = this.digestRegistry;\r\n\t\t\tif (digestRegistry[key] === undefined) {\r\n\t\t\t\tdigestRegistry[key] = [elt];\r\n\t\t\t} else {\r\n\t\t\t\tdigestRegistry[key].push(elt);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdigest(key) {\r\n\t\t\tif (this.digestRegistry[key]) {\r\n\t\t\t\tthis.digestRegistry[key].forEach((elt, index) => {\r\n\t\t\t\t\telt.onDigest(key);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.databinding.digest(key);\r\n\t\t}\r\n\r\n\t\tgetModel(absoluteKey) {\r\n\t\t\tconst k = dirname(absoluteKey);\r\n\t\t\tif (k && (typeof this.getModel(k) !== 'object')) {\r\n\t\t\t\tthis.setModel(k, {});\r\n\t\t\t}\r\n\t\t\tconst prefix = (absoluteKey.startsWith('[')) ? 'this.model' : 'this.model.';\r\n\t\t\tconst str = prefix + absoluteKey;\r\n\t\t\treturn eval(str);\r\n\t\t}\r\n\r\n\t\thasModel(absoluteKey) {\r\n\t\t\tconst k = dirname(absoluteKey);\r\n\t\t\tconst b = basename(absoluteKey);\r\n\t\t\tif (k) {\r\n\t\t\t\treturn this.hasModel(k) && (b in this.getModel(k));\r\n\t\t\t}\r\n\t\t\treturn b in this.model;\r\n\t\t}\r\n\r\n\t\tsetModel(absoluteKey, value) {\r\n\t\t\tif (this.getModel(absoluteKey) === value) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst str = 'this.model.' + absoluteKey + ' = value';\r\n\t\t\teval(str);\r\n\t\t}\r\n\r\n\t\tsetEvent(attr, value) {\r\n\t\t\tthis.event[attr] = () => eval(value);\r\n\t\t}\r\n\t}\r\n\r\n\tclass CircleBehavior {\r\n\t\tstatic get tag() {\r\n\t\t\treturn camel2Spinal(this.name);\r\n\t\t}\r\n\t\tstatic get reg() {\r\n\t\t\twindow.circle.behaviorRegistry[this.tag] = this;\r\n\t\t}\r\n\r\n\t\tconstructor(elt) {\r\n\t\t\tthis.elt = elt;\r\n\t\t\tthis.host = elt.getRootNode().host;\r\n\t\t\tthis.key = this.getModelVar(this.constructor.tag);\r\n\t\t\tthis.init();\r\n\r\n\t\t\tthis.host.bindKey(this.key, this);\r\n\t\t\tlet k = this.key;\r\n\t\t\twhile (k) {\r\n\t\t\t\tthis.host.bindKey(k, this);\r\n\t\t\t\tk = dirname(k);\r\n\t\t\t}\r\n\t\t\tthis.onDigest(this.key);\r\n\t\t}\r\n\r\n\t\tinit() { }\r\n\r\n\t\tgetModelVar(attr) {\r\n\t\t\treturn DBNotation.extractModelVar(this.elt.getAttribute(attr));\r\n\t\t}\r\n\r\n\t\tonDigest() { }\r\n\t}\r\n\r\n\t/**\r\n\t * The Circle class is the exposed class of the library.\r\n\t * The circle.js produces a global variable window.circle which is the hook\r\n\t * to all functionalities of this library.\r\n\t * \r\n\t * @class Circle\r\n\t */\r\n\tclass Circle {\r\n\t\tconstructor() {\r\n\t\t\tthis.Element = CircleElement;\r\n\t\t\tthis.Behavior = CircleBehavior;\r\n\t\t\tthis.digestId = 0;\r\n\t\t\tthis.dependancyInjectionRegistry = {};\r\n\t\t\tthis.behaviorRegistry = {};\r\n\t\t}\r\n\r\n\t\tstackTrace() {\r\n\t\t\tvar err = new Error();\r\n\t\t\treturn err.stack;\r\n\t\t}\r\n\r\n\t\tdi(str, di) {\r\n\t\t\tif (arguments.length > 1) {\r\n\t\t\t\tthis.dependancyInjectionRegistry[str] = di;\r\n\t\t\t}\r\n\t\t\treturn this.dependancyInjectionRegistry[str];\r\n\t\t}\r\n\t}\r\n\twindow.o = function (element, tag) {\r\n\t\tif (tag === undefined) {\r\n\t\t\treturn element.getRootNode().host;\r\n\t\t}\r\n\t\tlet host = element.getRootNode().host;\r\n\t\twhile (host.constructor.tag !== tag) {\r\n\t\t\thost = host.getRootNode().host;\r\n\t\t\tif (!host) {\r\n\t\t\t\tthrow new Error('circle.wc: cannot find a component with tag ' + tag);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn host;\r\n\t};\r\n\tObject.setPrototypeOf(window.o, new Circle());\r\n\twindow.circle = window.o;\r\n\r\n\t/**\r\n\t * CircleExpr is the component that allows displaying expressions.\r\n\t * \r\n\t * @class CircleExpr\r\n\t * @extends {circle.Element}\r\n\t */\r\n\tclass CircleExpr extends CircleElement {\r\n\t\trender() {\r\n\t\t\tlet str = (this.model.expr === undefined) ? '' : this.model.expr;\r\n\t\t\tstr = (typeof str === 'object') ? JSON.stringify(str) : str;\r\n\t\t\tthis.root.innerHTML = str;\r\n\t\t}\r\n\t}\r\n\tCircleExpr.reg;\r\n})();\r\n"]}