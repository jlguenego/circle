{"version":3,"sources":["webpack:///webpack/bootstrap cc98b70f944242a97b9a","webpack:///./src/circle/functions.js","webpack:///./src/circle/DBNotation.js","webpack:///./src/circle/main.js","webpack:///./src/circle/Circle.js","webpack:///./src/circle/CircleElement.js","webpack:///./src/circle/Databinding.js","webpack:///./src/circle/CircleBehavior.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","str","replace","toLowerCase","$1","toUpperCase","absoluteKey","match","navigator","userAgent","__webpack_exports__","parseAbsoluteKey","key","DBNotation","[object Object]","value","expr","substring","scope","TWO_WAYS","ONE_WAY","LITTERAL","EVENT","window","circle","console","warning","log","element","tag","undefined","getRootNode","host","constructor","Error","setPrototypeOf","__WEBPACK_IMPORTED_MODULE_0__Circle_js__","CircleExpr","Element","this","model","JSON","stringify","root","innerHTML","reg","Circle","__WEBPACK_IMPORTED_MODULE_0__CircleElement_js__","Behavior","__WEBPACK_IMPORTED_MODULE_1__CircleBehavior_js__","digestId","dependancyInjectionRegistry","behaviorRegistry","stack","di","arguments","length","parseBehavior","rootElt","querySelectorAll","forEach","elt","doc","document","currentScript","ownerDocument","CircleElement","HTMLElement","__WEBPACK_IMPORTED_MODULE_0__functions_js__","customElements","define","observedAttributes","_oa","oa","attr","oldValue","newValue","setModel","handler","parentKey","target","Array","isArray","CircleProxyType","Proxy","k","self","digest","deleteProperty","super","event","digestRegistry","templateSelector","databinding","__WEBPACK_IMPORTED_MODULE_1__Databinding_js__","isRenderingAsked","attachShadow","mode","myDoc","t","querySelector","clone","importNode","content","parseExpr","appendChild","connectedCallBack","init","setTimeout","render","onDigest","push","index","getModel","prefix","startsWith","eval","b","hasModel","walk","createTreeWalker","NodeFilter","SHOW_TEXT","array","node","nextNode","data","replacementNode","createElement","parentNode","insertBefore","removeChild","Databinding","circleElement","attributes","__WEBPACK_IMPORTED_MODULE_1__DBNotation_js__","isTwoWays","isOneWay","isEvent","extractModelVar","getAttribute","initScope","setEvent","extractEventExpr","modelVar","getModelVar","parent","getParent","bindKey","askRendering","parentModelValue","setAttribute","CircleBehavior"],"mappings":"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","file":"circle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap cc98b70f944242a97b9a","/**\r\n * Translate a string from CamelCase to spinal-case.\r\n * Note: works well with SPECIALCamelCase as well.\r\n * \r\n * @param {string} str - CamelCase string\r\n * @returns spinal-case equivalent string.\r\n */\r\nexport function camel2Spinal(str) {\r\n    // handle case like JLGStars becoming jlg-stars\r\n    str = str.replace(/^([A-Z]+)([A-Z][a-z])/g, '$1-$2');\r\n    // then do the traditional conversion to spinal case.\r\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\nexport function spinal2Camel(str) {\r\n    return str.replace(/(-[a-z])/g, function ($1) { return $1.toUpperCase().replace('-', ''); });\r\n}\r\n\r\n/**\r\n * Returns the parent key\r\n * Ex: \r\n * hello['world']['toto'] becomes hello['world']\r\n * hello['world'] becomes hello\r\n * hello becomes undefined\r\n * \r\n * @param {any} absoluteKey \r\n * @returns \r\n */\r\nexport function dirname(absoluteKey) {\r\n    if (absoluteKey.match(/\\[/)) {\r\n        return absoluteKey.replace(/^(.*)\\[[^[]+?\\]$/, '$1');\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Return the last key\r\n * Ex: \r\n * hello['world']['toto'] becomes toto\r\n * hello['world'] becomes world\r\n * hello becomes hello\r\n * \r\n * @param {any} absoluteKey \r\n * @returns \r\n */\r\nexport function basename(absoluteKey) {\r\n    if (absoluteKey.match(/\\[/)) {\r\n        return absoluteKey.replace(/^.*\\['([^']+)'\\]$/, '$1');\r\n    }\r\n    return absoluteKey;\r\n}\r\n\r\n\r\n\r\n/**\r\n * check if the user agent is Firefox\r\n * \r\n * @returns true if user agent is Firefox, false otherwise.\r\n */\r\nexport function isFirefox() {\r\n    return navigator.userAgent.match(/Firefox/) !== null;\r\n}\r\n\r\n/**\r\n * check if the user agent is Microsoft Edge\r\n * \r\n * @returns true if user agent is Edge, false otherwise.\r\n */\r\nexport function isEdge() {\r\n    return navigator.userAgent.match(/Edge/) !== null;\r\n}\r\n\r\n\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/functions.js\n// module id = 0\n// module chunks = 0","/**\r\n * Transforms hello.world[3].foo.bar in hello['world'][3]['foo']['bar']\r\n * \r\n * \r\n * @param {any} key \r\n * @returns \r\n */\r\nfunction parseAbsoluteKey(key) {\r\n    return key.replace(/\\.([^.]+)/g, '[\\'$1\\']');\r\n}\r\n\r\n/**\r\n * Class in charge of managing the databinding notation:\r\n * [] for one way databinding\r\n * [[]] for two way databinding\r\n * & for event databinding\r\n * For internal scope notation (Angular like: '@' for litteral, '<' for simple DB,\r\n * '=' for 2 way DB, '&' for event DB)\r\n * \r\n * @class DBNotation\r\n */\r\nexport class DBNotation {\r\n    /**\r\n     * Tests if the notation is a 2 ways data binding.\r\n     * Notation is for the time being: [[...]]\r\n     * \r\n     * @param {any} value \r\n     * @returns \r\n     */\r\n    static isTwoWays(value) {\r\n        return value.match(/^\\[\\[.*\\]\\]$/);\r\n    }\r\n\r\n    /**\r\n     * Tests if the notation is a 1 way data binding.\r\n     * Notation is for the time being: [...]\r\n     * \r\n     * @param {any} value \r\n     * @returns \r\n     */\r\n    static isOneWay(value) {\r\n        return value.match(/^\\[.*\\]$/);\r\n    }\r\n\r\n    /**\r\n     * Test if the notation is a event databinding\r\n     * Notation is for the time being: &...\r\n     * \r\n     * @static\r\n     * @param {any} value \r\n     * @returns \r\n     * @memberof DBNotation\r\n     */\r\n    static isEvent(value) {\r\n        return value.match(/^&/);\r\n    }\r\n\r\n    /**\r\n     * removes the [] or [[]].\r\n     * \r\n     * @static\r\n     * @param {any} value \r\n     * @returns \r\n     * @memberof DBNotation\r\n     */\r\n    static extractModelVar(value) {\r\n        let expr = value.replace(/^\\[(.*?)\\]$/g, '$1').replace(/^\\[(.*?)\\]$/g, '$1');\r\n        expr = parseAbsoluteKey(expr);\r\n        return expr;\r\n    }\r\n\r\n    /**\r\n     * Removes the starting &.\r\n     * \r\n     * @static\r\n     * @param {any} value \r\n     * @returns \r\n     * @memberof DBNotation\r\n     */\r\n    static extractEventExpr(value) {\r\n        return value.substring(1);\r\n    }\r\n\r\n    static get scope() {\r\n        return {\r\n            TWO_WAYS: '=',\r\n            ONE_WAY: '<',\r\n            LITTERAL: '@',\r\n            EVENT: '&'\r\n        };\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/DBNotation.js\n// module id = 1\n// module chunks = 0","import { Circle } from './Circle.js';\r\n\r\nif (window.circle) { console.warning('circle already loaded'); }\r\n\r\nconsole.log('circle start');\r\n\r\nwindow.o = function (element, tag) {\r\n    if (tag === undefined) {\r\n        return element.getRootNode().host;\r\n    }\r\n    let host = element.getRootNode().host;\r\n    while (host.constructor.tag !== tag) {\r\n        host = host.getRootNode().host;\r\n        if (!host) {\r\n            throw new Error('circle.wc: cannot find a component with tag ' + tag);\r\n        }\r\n    }\r\n    return host;\r\n};\r\nObject.setPrototypeOf(window.o, new Circle());\r\nwindow.circle = window.o;\r\n\r\n\r\n/**\r\n * CircleExpr is the component that allows displaying expressions.\r\n * \r\n * @class CircleExpr\r\n * @extends {circle.Element}\r\n */\r\nclass CircleExpr extends o.Element {\r\n    render() {\r\n        let str = (this.model.expr === undefined) ? '' : this.model.expr;\r\n        str = (typeof str === 'object') ? JSON.stringify(str) : str;\r\n        this.root.innerHTML = str;\r\n    }\r\n}\r\nCircleExpr.reg;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/main.js\n// module id = 2\n// module chunks = 0","import { CircleElement } from './CircleElement.js';\r\nimport { CircleBehavior } from './CircleBehavior.js';\r\n\r\n/**\r\n * The Circle class is the exposed class of the library.\r\n * The circle.js produces a global variable window.circle which is the hook\r\n * to all functionalities of this library.\r\n * \r\n * @class Circle\r\n */\r\nexport class Circle {\r\n    constructor() {\r\n        this.Element = CircleElement;\r\n        this.Behavior = CircleBehavior;\r\n        this.digestId = 0;\r\n        this.dependancyInjectionRegistry = {};\r\n        this.behaviorRegistry = {};\r\n    }\r\n\r\n    stackTrace() {\r\n        var err = new Error();\r\n        return err.stack;\r\n    }\r\n\r\n    di(str, di) {\r\n        if (arguments.length > 1) {\r\n            this.dependancyInjectionRegistry[str] = di;\r\n        }\r\n        return this.dependancyInjectionRegistry[str];\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/Circle.js\n// module id = 3\n// module chunks = 0","import { camel2Spinal, spinal2Camel, dirname, basename, isFirefox, isEdge } from './functions.js';\r\nimport { Databinding } from './Databinding.js';\r\n\r\nfunction parseBehavior(rootElt) {\r\n    for (let tag in window.circle.behaviorRegistry) {\r\n        rootElt.querySelectorAll(`[${tag}]`).forEach(elt => {\r\n            new window.circle.behaviorRegistry[tag](elt);\r\n        });\r\n    }\r\n}\r\n\r\n// Firefox and Edge does not understand well currentScript after init.\r\n// So we keep this pointer for later.\r\nconst doc = document.currentScript.ownerDocument;\r\n\r\n/**\r\n * A component in circle must extends the circle.Element class\r\n * which is a pointer on the CircleElement class.\r\n * \r\n * @class CircleElement\r\n * @extends {HTMLElement}\r\n */\r\nexport class CircleElement extends HTMLElement {\r\n    static get tag() {\r\n        return camel2Spinal(this.name);\r\n    }\r\n    static get reg() {\r\n        window.customElements.define(this.tag, this);\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return this._oa;\r\n    }\r\n\r\n    static set oa(value) {\r\n        this._oa = value;\r\n    }\r\n\r\n    attributeChangedCallback(attr, oldValue, newValue) {\r\n        this.setModel(spinal2Camel(attr), newValue);\r\n    }\r\n    constructor() {\r\n        super();\r\n        const self = this;\r\n\r\n        class CircleProxyType { }\r\n\r\n        function handler(parentKey) {\r\n            return {\r\n                set(target, key, value) {\r\n                    const absoluteKey = (parentKey) ? `${parentKey}['${key}']` : key;\r\n                    if (Array.isArray(target)) {\r\n                        if (key === 'length') {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    if (value !== null && typeof value === 'object' && !(value instanceof CircleProxyType)) {\r\n                        target[key] = new Proxy(value, handler(absoluteKey));\r\n                    } else {\r\n                        target[key] = value;\r\n                    }\r\n                    circle.digestId++;\r\n                    // console.log('%d: %s: update %s to %s',\r\n                    //     circle.digestId, self.constructor.name, absoluteKey, value, circle.stackTrace());\r\n                    let k = absoluteKey;\r\n                    while (k) {\r\n                        self.digest(k);\r\n                        k = dirname(k);\r\n                    }\r\n                    return true;\r\n                },\r\n\r\n                deleteProperty(target, key) {\r\n                    delete target[key];\r\n                    if (Array.isArray(target)) {\r\n                        target.length--;\r\n                    }\r\n                    circle.digestId++;\r\n                    // console.log('%d: %s: delete %s',\r\n                    // \tcircle.digestId, self.constructor.name, absoluteKey, circle.stackTrace());\r\n                    self.digest(parentKey);\r\n                    return true;\r\n                },\r\n\r\n                getPrototypeOf: function (key) {\r\n                    return CircleProxyType.prototype;\r\n                }\r\n            };\r\n        }\r\n\r\n        this.event = {};\r\n        this.model = new Proxy({}, handler());\r\n        this.digestRegistry = {};\r\n        this.templateSelector = '#' + this.constructor.tag;\r\n        this.databinding = new Databinding(this);\r\n        this.isRenderingAsked = false;\r\n    }\r\n\r\n    getParent() {\r\n        return this.getRootNode().host;\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.root = this.root || this.attachShadow({\r\n            // see https://developers.google.com/web/fundamentals/architecture/building-components/shadowdom\r\n            // Eric B. explain why it is better to use open mode.\r\n            mode: 'open'\r\n        });\r\n        this.myDoc = (isFirefox() || isEdge() || (document.currentScript === null)) ?\r\n            doc : document.currentScript.ownerDocument;\r\n\r\n        const t = this.myDoc.querySelector(this.templateSelector);\r\n        if (t) {\r\n            const clone = document.importNode(t.content, true);\r\n            this.parseExpr(clone);\r\n            this.root.innerHTML = '';\r\n            this.root.appendChild(clone);\r\n            parseBehavior(this.root);\r\n        }\r\n        this.databinding.connectedCallBack();\r\n        this.init();\r\n    }\r\n\r\n    init() { }\r\n\r\n    askRendering() {\r\n        if (!this.isRenderingAsked) {\r\n            this.isRenderingAsked = true;\r\n            setTimeout(() => {\r\n                this.render();\r\n                this.isRenderingAsked = false;\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    render() { }\r\n\r\n    onDigest(key) {\r\n        this.databinding.onDigest(key);\r\n    }\r\n    bindKey(key, elt) {\r\n        const digestRegistry = this.digestRegistry;\r\n        if (digestRegistry[key] === undefined) {\r\n            digestRegistry[key] = [elt];\r\n        } else {\r\n            digestRegistry[key].push(elt);\r\n        }\r\n    }\r\n\r\n    digest(key) {\r\n        if (this.digestRegistry[key]) {\r\n            this.digestRegistry[key].forEach((elt, index) => {\r\n                elt.onDigest(key);\r\n            });\r\n        }\r\n        this.databinding.digest(key);\r\n    }\r\n\r\n    getModel(absoluteKey) {\r\n        const k = dirname(absoluteKey);\r\n        if (k && (typeof this.getModel(k) !== 'object')) {\r\n            this.setModel(k, {});\r\n        }\r\n        const prefix = (absoluteKey.startsWith('[')) ? 'this.model' : 'this.model.';\r\n        const str = prefix + absoluteKey;\r\n        return eval(str);\r\n    }\r\n\r\n    hasModel(absoluteKey) {\r\n        const k = dirname(absoluteKey);\r\n        const b = basename(absoluteKey);\r\n        if (k) {\r\n            return this.hasModel(k) && (b in this.getModel(k));\r\n        }\r\n        return b in this.model;\r\n    }\r\n\r\n    setModel(absoluteKey, value) {\r\n        if (this.getModel(absoluteKey) === value) {\r\n            return;\r\n        }\r\n        const str = 'this.model.' + absoluteKey + ' = value';\r\n        eval(str);\r\n    }\r\n\r\n    setEvent(attr, value) {\r\n        this.event[attr] = () => eval(value);\r\n    }\r\n\r\n\r\n    /**\r\n     * We want the user be able to easily insert expression like in AngularJS.\r\n     * But internally, the {{myModelVar}} must be converted to <circle-expr expr=\"[myModelVar]\"></circle-expr>\r\n     * \r\n     * @param {any} elt \r\n     * @memberof CircleElement\r\n     */\r\n    parseExpr(elt) {\r\n        const walk = document.createTreeWalker(elt, NodeFilter.SHOW_TEXT, null, false);\r\n        let array = [];\r\n        for (let node = walk.nextNode(); node !== null; node = walk.nextNode()) {\r\n            if (node.data.match(/{{(.*?)}}/g)) {\r\n                array.push(node);\r\n            }\r\n        }\r\n        array.forEach((node) => {\r\n            const replacementNode = document.createElement('span');\r\n            replacementNode.innerHTML = node.data.replace(/{{(.*?)}}/g, (match, name) => {\r\n                return `<circle-expr expr=\"[${name}]\"></circle-expr>`;\r\n            });\r\n            const parentNode = node.parentNode;\r\n            parentNode.insertBefore(replacementNode, node);\r\n            parentNode.removeChild(node);\r\n        });\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/CircleElement.js\n// module id = 4\n// module chunks = 0","import { spinal2Camel } from './functions.js';\r\n\r\nimport { DBNotation } from './DBNotation.js';\r\n\r\nexport class Databinding {\r\n    constructor(circleElement) {\r\n        this.elt = circleElement;\r\n        this.scope = {};\r\n    }\r\n\r\n    initScope() {\r\n        for (let i = 0; i < this.elt.attributes.length; i++) {\r\n            const key = this.elt.attributes[i].name;\r\n            const value = this.elt.attributes[i].value;\r\n            if (DBNotation.isTwoWays(value)) {\r\n                this.scope[key] = DBNotation.scope.TWO_WAYS;\r\n            } else if (DBNotation.isOneWay(value)) {\r\n                this.scope[key] = DBNotation.scope.ONE_WAY;\r\n            } else if (DBNotation.isEvent(value)) {\r\n                this.scope[key] = DBNotation.scope.EVENT;\r\n            } else {\r\n                this.scope[key] = DBNotation.scope.LITTERAL;\r\n            }\r\n        }\r\n    }\r\n\r\n    getModelVar(attr) {\r\n        return DBNotation.extractModelVar(this.elt.getAttribute(attr));\r\n    }\r\n\r\n    connectedCallBack() {\r\n        this.initScope();\r\n        for (let attr in this.scope) {\r\n            if (this.scope[attr] === DBNotation.scope.LITTERAL) {\r\n                this.elt.setModel(spinal2Camel(attr), this.elt.getAttribute(attr));\r\n                continue;\r\n            }\r\n\r\n            if (this.scope[attr] === DBNotation.scope.EVENT) {\r\n                this.elt.setEvent(spinal2Camel(attr), DBNotation.extractEventExpr(this.elt.getAttribute(attr)));\r\n                continue;\r\n            }\r\n\r\n            const modelVar = this.getModelVar(attr);\r\n            const parent = this.elt.getParent();\r\n            if (parent) {\r\n                parent.bindKey(modelVar, this.elt);\r\n            }\r\n            this.elt.onDigest(modelVar);\r\n        }\r\n        this.elt.askRendering();\r\n    }\r\n\r\n    onDigest(key) {\r\n        for (let attr in this.scope) {\r\n            if (this.scope[attr] === DBNotation.scope.LITTERAL) {\r\n                continue;\r\n            }\r\n            const modelVar = this.getModelVar(attr);\r\n            if (modelVar === key) {\r\n                const parentModelValue = this.elt.getParent().getModel(key);\r\n                this.elt.setModel(spinal2Camel(attr), parentModelValue);\r\n            }\r\n        }\r\n        this.elt.askRendering();\r\n    }\r\n\r\n    digest(key) {\r\n        if (key in this.scope) {\r\n            if (this.scope[key] === DBNotation.scope.LITTERAL) {\r\n                if (this.elt.getAttribute(key) !== this.elt.getModel(spinal2Camel(key))) {\r\n                    this.elt.setAttribute(key, this.elt.getModel(spinal2Camel(key)));\r\n                }\r\n            }\r\n            if (this.scope[key] === DBNotation.scope.TWO_WAYS) {\r\n                const modelVar = this.getModelVar(key);\r\n                this.elt.getParent().setModel(modelVar, this.elt.getModel(spinal2Camel(key)));\r\n            }\r\n        }\r\n        this.elt.askRendering();\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/Databinding.js\n// module id = 5\n// module chunks = 0","import { camel2Spinal, dirname } from './functions.js';\r\nimport { DBNotation } from './DBNotation.js';\r\n\r\nexport class CircleBehavior {\r\n    static get tag() {\r\n        return camel2Spinal(this.name);\r\n    }\r\n    static get reg() {\r\n        window.circle.behaviorRegistry[this.tag] = this;\r\n    }\r\n\r\n    constructor(elt) {\r\n        this.elt = elt;\r\n        this.host = elt.getRootNode().host;\r\n        this.key = this.getModelVar(this.constructor.tag);\r\n        this.init();\r\n        console.log('behavior');\r\n\r\n        this.host.bindKey(this.key, this);\r\n        let k = this.key;\r\n        while (k) {\r\n            this.host.bindKey(k, this);\r\n            k = dirname(k);\r\n        }\r\n        this.onDigest(this.key);\r\n    }\r\n\r\n    init() { }\r\n\r\n    getModelVar(attr) {\r\n        return DBNotation.extractModelVar(this.elt.getAttribute(attr));\r\n    }\r\n\r\n    onDigest() { }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/CircleBehavior.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}