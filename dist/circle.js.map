{"version":3,"sources":["webpack:///webpack/bootstrap 4b04a30b964697b8feb8","webpack:///./src/circle/functions.js","webpack:///./src/circle/DBNotation.js","webpack:///./src/circle/main.js","webpack:///./src/circle/Circle.js","webpack:///./src/circle/CircleElement.js","webpack:///./src/circle/Databinding.js","webpack:///./src/circle/CircleBehavior.js"],"names":["__webpack_require__","moduleId","installedModules","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","key2Array","key","substring","length","split","array2Key","array","map","join","str","replace","toLowerCase","$1","toUpperCase","absoluteKey","pop","navigator","userAgent","match","__webpack_exports__","parseAbsoluteKey","mode","reduce","acc","DBNotation","[object Object]","value","expr","scope","TWO_WAYS","ONE_WAY","LITTERAL","EVENT","window","circle","console","warning","element","tag","undefined","getRootNode","host","constructor","Error","setPrototypeOf","__WEBPACK_IMPORTED_MODULE_0__Circle_js__","CircleExpr","Element","this","model","JSON","stringify","root","innerHTML","reg","Circle","__WEBPACK_IMPORTED_MODULE_0__CircleElement_js__","Behavior","__WEBPACK_IMPORTED_MODULE_1__CircleBehavior_js__","digestId","dependancyInjectionRegistry","behaviorRegistry","stack","di","arguments","doc","document","currentScript","ownerDocument","CircleElement","HTMLElement","__WEBPACK_IMPORTED_MODULE_0__functions_js__","args","myDoc","_oa","customElements","define","observedAttributes","attr","oldValue","newValue","setModel","handler","parentKey","target","Array","isArray","CircleProxyType","Proxy","k","absKey","self","digest","deleteProperty","getPrototypeOf","super","event","digestRegistry","templateSelector","databinding","__WEBPACK_IMPORTED_MODULE_1__Databinding_js__","isRenderingAsked","oParent","attachShadow","t","querySelector","clone","importNode","content","parseExpr","appendChild","parseBehavior","connectedCallBack","init","disconnectedCallBack","setTimeout","render","onDigest","elt","push","filter","forEach","index","getModel","eval","b","hasModel","walk","createTreeWalker","NodeFilter","SHOW_TEXT","node","nextNode","data","replacementNode","createElement","parentNode","insertBefore","removeChild","rootElt","querySelectorAll","Databinding","circleElement","attributes","__WEBPACK_IMPORTED_MODULE_1__DBNotation_js__","isTwoWays","isOneWay","isEvent","extractModelVar","getAttribute","initScope","setEvent","extractEventExpr","modelVar","getModelVar","parent","getParent","bindKey","askRendering","unbind","parentModelValue","setAttribute","CircleBehavior","extractModelVarFromBehavior"],"mappings":"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","file":"circle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4b04a30b964697b8feb8","/**\r\n * Translate a string from CamelCase to spinal-case.\r\n * Note: works well with SPECIALCamelCase as well.\r\n * \r\n * @param {string} str - CamelCase string\r\n * @returns spinal-case equivalent string.\r\n */\r\nexport function camel2Spinal(str) {\r\n    // handle case like JLGStars becoming jlg-stars\r\n    str = str.replace(/^([A-Z]+)([A-Z][a-z])/g, '$1-$2');\r\n    // then do the traditional conversion to spinal case.\r\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\nexport function spinal2Camel(str) {\r\n    return str.replace(/(-[a-z])/g, function ($1) { return $1.toUpperCase().replace('-', ''); });\r\n}\r\n\r\nfunction key2Array(key) {\r\n    return key.substring(2, key.length -2).split(/'\\]\\['/);\r\n}\r\n\r\nfunction array2Key(array) {\r\n    return array.map(n => `['${n}']`).join('');\r\n}\r\n\r\n/**\r\n * Returns the parent key\r\n * Ex: \r\n * ['hello']['world']['toto'] becomes ['hello']['world']\r\n * ['hello']['world'] becomes ['hello']\r\n * ['hello'] becomes undefined\r\n * \r\n * @param {any} absoluteKey \r\n * @returns \r\n */\r\nexport function dirname(absoluteKey) {\r\n    const array = key2Array(absoluteKey);\r\n    array.pop();\r\n    const result = array2Key(array);\r\n    return result;\r\n}\r\n\r\n/**\r\n * Return the last key\r\n * Ex: \r\n * hello['world']['toto'] becomes toto\r\n * hello['world'] becomes world\r\n * hello becomes hello\r\n * \r\n * @param {any} absoluteKey \r\n * @returns \r\n */\r\nexport function basename(absoluteKey) {\r\n    const array = key2Array(absoluteKey);\r\n    return array.pop();\r\n}\r\n\r\n\r\n\r\n/**\r\n * check if the user agent is Firefox\r\n * \r\n * @returns true if user agent is Firefox, false otherwise.\r\n */\r\nexport function isFirefox() {\r\n    return navigator.userAgent.match(/Firefox/) !== null;\r\n}\r\n\r\n/**\r\n * check if the user agent is Microsoft Edge\r\n * \r\n * @returns true if user agent is Edge, false otherwise.\r\n */\r\nexport function isEdge() {\r\n    return navigator.userAgent.match(/Edge/) !== null;\r\n}\r\n\r\n\r\n\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/functions.js\n// module id = 0\n// module chunks = 0","/**\r\n * Transforms hello.world[3].foo.bar['a.\\'b'] in ['hello']['world']['3']['foo']['bar']['a.\\'b']\r\n * \r\n * \r\n * @param {any} key \r\n * @returns \r\n */\r\nfunction parseAbsoluteKey(key) {\r\n    const array = key.split(/(\\.|\\['|'\\])/);\r\n    let mode = 0; // 0 is dot notation, 1 is inside [].\r\n    const result = array.reduce((acc, n) => {\r\n        if (mode === 0) {\r\n            if (n === '') {\r\n                return acc;\r\n            }\r\n            if (n === '[\\'') {\r\n                mode = 1;\r\n                return acc + n;\r\n            }\r\n            if (n === '.') {\r\n                return acc;\r\n            }\r\n            return acc + `['${n}']`;\r\n        }\r\n        if (n === '\\']') {\r\n            mode = 0;\r\n        }\r\n        return acc + n;\r\n    }, '');\r\n    return result;\r\n}\r\n\r\n/**\r\n * Class in charge of managing the databinding notation:\r\n * [] for one way databinding\r\n * [[]] for two way databinding\r\n * & for event databinding\r\n * For internal scope notation (Angular like: '@' for litteral, '<' for simple DB,\r\n * '=' for 2 way DB, '&' for event DB)\r\n * \r\n * @class DBNotation\r\n */\r\nexport class DBNotation {\r\n    /**\r\n     * Tests if the notation is a 2 ways data binding.\r\n     * Notation is for the time being: [[...]]\r\n     * \r\n     * @param {any} value \r\n     * @returns \r\n     */\r\n    static isTwoWays(value) {\r\n        return value.match(/^\\[\\[.*\\]\\]$/);\r\n    }\r\n\r\n    /**\r\n     * Tests if the notation is a 1 way data binding.\r\n     * Notation is for the time being: [...]\r\n     * \r\n     * @param {any} value \r\n     * @returns \r\n     */\r\n    static isOneWay(value) {\r\n        return value.match(/^\\[.*\\]$/);\r\n    }\r\n\r\n    /**\r\n     * Test if the notation is a event databinding\r\n     * Notation is for the time being: &...\r\n     * \r\n     * @static\r\n     * @param {any} value \r\n     * @returns \r\n     * @memberof DBNotation\r\n     */\r\n    static isEvent(value) {\r\n        return value.match(/^&/);\r\n    }\r\n\r\n    /**\r\n     * removes the [] or [[]].\r\n     * \r\n     * @static\r\n     * @param {any} value \r\n     * @returns \r\n     * @memberof DBNotation\r\n     */\r\n    static extractModelVar(value) {\r\n\r\n        let expr = value.replace(/^\\[([^'].*?)\\]$/g, '$1').replace(/^\\[([^'].*?)\\]$/g, '$1');\r\n        expr = parseAbsoluteKey(expr);\r\n        return expr;\r\n    }\r\n\r\n    /**\r\n     * removes the <>.\r\n     * \r\n     * @static\r\n     * @param {any} value \r\n     * @returns \r\n     * @memberof DBNotation\r\n     */\r\n    static extractModelVarFromBehavior(value) {\r\n        let expr = value.replace(/^<(.*)>$/, '$1');\r\n        expr = parseAbsoluteKey(expr);\r\n        return expr;\r\n    }\r\n\r\n    /**\r\n     * Removes the starting &.\r\n     * \r\n     * @static\r\n     * @param {any} value \r\n     * @returns \r\n     * @memberof DBNotation\r\n     */\r\n    static extractEventExpr(value) {\r\n        return value.substring(1);\r\n    }\r\n\r\n    static get scope() {\r\n        return {\r\n            TWO_WAYS: '=',\r\n            ONE_WAY: '<',\r\n            LITTERAL: '@',\r\n            EVENT: '&'\r\n        };\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/DBNotation.js\n// module id = 1\n// module chunks = 0","import { Circle } from './Circle.js';\r\n\r\nif (window.circle) { console.warning('circle already loaded'); }\r\n\r\nwindow.o = function (element, tag) {\r\n    if (tag === undefined) {\r\n        return element.getRootNode().host;\r\n    }\r\n    let host = element.getRootNode().host;\r\n    while (host.constructor.tag !== tag) {\r\n        host = host.getRootNode().host;\r\n        if (!host) {\r\n            throw new Error('circle.wc: cannot find a component with tag ' + tag);\r\n        }\r\n    }\r\n    return host;\r\n};\r\nObject.setPrototypeOf(window.o, new Circle());\r\nwindow.circle = window.o;\r\n\r\n/**\r\n * CircleExpr is the component that allows displaying expressions.\r\n * \r\n * @class CircleExpr\r\n * @extends {circle.Element}\r\n */\r\nclass CircleExpr extends o.Element {\r\n    render() {\r\n        let str = (this.model.expr === undefined) ? '' : this.model.expr;\r\n        str = (typeof str === 'object') ? JSON.stringify(str) : str;\r\n        this.root.innerHTML = str;\r\n    }\r\n}\r\nCircleExpr.reg();\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/main.js\n// module id = 2\n// module chunks = 0","import { CircleElement } from './CircleElement.js';\r\nimport { CircleBehavior } from './CircleBehavior.js';\r\n\r\n/**\r\n * The Circle class is the exposed class of the library.\r\n * The circle.js produces a global variable window.circle which is the hook\r\n * to all functionalities of this library.\r\n * \r\n * @class Circle\r\n */\r\nexport class Circle {\r\n    constructor() {\r\n        this.Element = CircleElement;\r\n        this.Behavior = CircleBehavior;\r\n        this.digestId = 0;\r\n        this.dependancyInjectionRegistry = {};\r\n        this.behaviorRegistry = {};\r\n    }\r\n\r\n    stackTrace() {\r\n        var err = new Error();\r\n        return err.stack;\r\n    }\r\n\r\n    di(str, di) {\r\n        if (arguments.length > 1) {\r\n            this.dependancyInjectionRegistry[str] = di;\r\n        }\r\n        return this.dependancyInjectionRegistry[str];\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/Circle.js\n// module id = 3\n// module chunks = 0","import { camel2Spinal, spinal2Camel, dirname, basename, isFirefox, isEdge } from './functions.js';\r\nimport { Databinding } from './Databinding.js';\r\n\r\n// Firefox and Edge does not understand well currentScript after init.\r\n// So we keep this pointer for later.\r\nconst doc = document.currentScript.ownerDocument;\r\n\r\n/**\r\n * A component in circle must extends the circle.Element class\r\n * which is a pointer on the CircleElement class.\r\n * \r\n * @class CircleElement\r\n * @extends {HTMLElement}\r\n */\r\nexport class CircleElement extends HTMLElement {\r\n    static get tag() {\r\n        return camel2Spinal(this.name);\r\n    }\r\n    static reg(...args) {\r\n        this.myDoc = (isFirefox() || isEdge() || (document.currentScript === null)) ?\r\n            doc : document.currentScript.ownerDocument;\r\n        this._oa = args;\r\n        window.customElements.define(this.tag, this);\r\n        return this;\r\n    }\r\n\r\n    static get observedAttributes() {\r\n        return this._oa;\r\n    }\r\n\r\n    attributeChangedCallback(attr, oldValue, newValue) {\r\n        this.setModel(`['${spinal2Camel(attr)}']`, newValue);\r\n    }\r\n    constructor() {\r\n        super();\r\n        const self = this;\r\n\r\n        class CircleProxyType { }\r\n\r\n        function handler(parentKey) {\r\n            return {\r\n                set(target, key, value) {\r\n                    const absoluteKey = (parentKey) ? `${parentKey}['${key}']` : `['${key}']`;\r\n                    if (Array.isArray(target)) {\r\n                        if (key === 'length') {\r\n                            return true;\r\n                        }\r\n                    }\r\n                    if (value !== null && typeof value === 'object' && !(value instanceof CircleProxyType)) {\r\n                        target[key] = new Proxy(value, handler(absoluteKey));\r\n                        for (let k in value) {\r\n                            const absKey = absoluteKey + `['${k}']`;\r\n                            self.digest(absKey);\r\n                        }\r\n                    } else {\r\n                        target[key] = value;\r\n                    }\r\n                    circle.digestId++;\r\n                    // console.log('%d: %s: update %s to %s',\r\n                    //     circle.digestId, self.constructor.name, absoluteKey, value, circle.stackTrace());\r\n                    let k = absoluteKey;\r\n                    while (k) {\r\n                        self.digest(k);\r\n                        k = dirname(k);\r\n                    }\r\n                    return true;\r\n                },\r\n\r\n                deleteProperty(target, key) {\r\n                    delete target[key];\r\n                    if (Array.isArray(target)) {\r\n                        target.length--;\r\n                    }\r\n                    circle.digestId++;\r\n                    // console.log('%d: %s: delete %s',\r\n                    // \tcircle.digestId, self.constructor.name, absoluteKey, circle.stackTrace());\r\n                    self.digest(parentKey);\r\n                    return true;\r\n                },\r\n\r\n                getPrototypeOf: function (key) {\r\n                    return CircleProxyType.prototype;\r\n                }\r\n            };\r\n        }\r\n\r\n        this.event = {};\r\n        this.model = new Proxy({}, handler());\r\n        this.digestRegistry = {};\r\n        this.templateSelector = '#' + this.constructor.tag;\r\n        this.databinding = new Databinding(this);\r\n        this.isRenderingAsked = false;\r\n    }\r\n\r\n    getParent() {\r\n        if (!this.oParent) {\r\n            this.oParent = this.getRootNode().host;\r\n        }\r\n        return this.oParent;\r\n    }\r\n\r\n    connectedCallback() {\r\n        this.root = this.root || this.attachShadow({\r\n            // see https://developers.google.com/web/fundamentals/architecture/building-components/shadowdom\r\n            // Eric B. explain why it is better to use open mode.\r\n            mode: 'open'\r\n        });\r\n\r\n        const t = this.constructor.myDoc.querySelector(this.templateSelector);\r\n        if (t) {\r\n            const clone = document.importNode(t.content, true);\r\n            this.parseExpr(clone);\r\n            this.root.innerHTML = '';\r\n            this.root.appendChild(clone);\r\n            this.parseBehavior(this.root);\r\n        }\r\n        this.databinding.connectedCallBack();\r\n        this.init();\r\n    }\r\n\r\n    disconnectedCallback() {\r\n        this.databinding.disconnectedCallBack();\r\n    }\r\n\r\n    init() { }\r\n\r\n    askRendering() {\r\n        if (!this.isRenderingAsked) {\r\n            this.isRenderingAsked = true;\r\n            setTimeout(() => {\r\n                this.render();\r\n                this.isRenderingAsked = false;\r\n            }, 0);\r\n        }\r\n    }\r\n\r\n    render() { }\r\n\r\n    onDigest(key) {\r\n        this.databinding.onDigest(key);\r\n    }\r\n    bindKey(key, elt) {\r\n        const digestRegistry = this.digestRegistry;\r\n        if (digestRegistry[key] === undefined) {\r\n            digestRegistry[key] = [elt];\r\n        } else {\r\n            digestRegistry[key].push(elt);\r\n        }\r\n    }\r\n\r\n    unbind(elt) {\r\n        for (let key in this.digestRegistry) {\r\n            this.digestRegistry[key] = this.digestRegistry[key].filter(n => n !== elt);\r\n        }\r\n    }\r\n\r\n    digest(key) {\r\n        if (this.digestRegistry[key]) {\r\n            this.digestRegistry[key].forEach((elt, index) => {\r\n                elt.onDigest(key);\r\n            });\r\n        }\r\n        this.databinding.digest(key);\r\n    }\r\n\r\n    getModel(absoluteKey) {\r\n        const k = dirname(absoluteKey);\r\n        if (k && (typeof this.getModel(k) !== 'object')) {\r\n            this.setModel(k, {});\r\n        }\r\n        const str = 'this.model' + absoluteKey;\r\n        return eval(str);\r\n    }\r\n\r\n    hasModel(absoluteKey) {\r\n        const k = dirname(absoluteKey);\r\n        const b = basename(absoluteKey);\r\n        if (k) {\r\n            return this.hasModel(k) && (b in this.getModel(k));\r\n        }\r\n        return b in this.model;\r\n    }\r\n\r\n    setModel(absoluteKey, value) {\r\n        if (this.getModel(absoluteKey) === value) {\r\n            return;\r\n        }\r\n        const str = 'this.model' + absoluteKey + ' = value';\r\n        eval(str);\r\n    }\r\n\r\n    setEvent(attr, value) {\r\n        this.event[attr] = () => eval(value);\r\n    }\r\n\r\n\r\n    /**\r\n     * We want the user be able to easily insert expression like in AngularJS.\r\n     * But internally, the {{myModelVar}} must be converted to <circle-expr expr=\"[myModelVar]\"></circle-expr>\r\n     * \r\n     * @param {any} elt \r\n     * @memberof CircleElement\r\n     */\r\n    parseExpr(elt) {\r\n        const walk = document.createTreeWalker(elt, NodeFilter.SHOW_TEXT, null, false);\r\n        let array = [];\r\n        let node;\r\n        for (node = walk.nextNode(); node !== null; node = walk.nextNode()) {\r\n            if (node.data.match(/{{(.*?)}}/g)) {\r\n                array.push(node);\r\n            }\r\n        }\r\n        array.forEach((node) => {\r\n            const replacementNode = document.createElement('span');\r\n            replacementNode.innerHTML = node.data.replace(/{{(.*?)}}/g, (match, name) => {\r\n                return `<circle-expr expr=\"[${name}]\"></circle-expr>`;\r\n            });\r\n            const parentNode = node.parentNode;\r\n            parentNode.insertBefore(replacementNode, node);\r\n            parentNode.removeChild(node);\r\n        });\r\n    }\r\n\r\n    parseBehavior(rootElt) {\r\n        for (let tag in window.circle.behaviorRegistry) {\r\n            rootElt.querySelectorAll(`[${tag}]`).forEach(elt => {\r\n                new window.circle.behaviorRegistry[tag](elt);\r\n            });\r\n        }\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/CircleElement.js\n// module id = 4\n// module chunks = 0","import { spinal2Camel } from './functions.js';\r\n\r\nimport { DBNotation } from './DBNotation.js';\r\n\r\nexport class Databinding {\r\n    constructor(circleElement) {\r\n        this.elt = circleElement;\r\n        this.scope = {};\r\n    }\r\n\r\n    initScope() {\r\n        for (let i = 0; i < this.elt.attributes.length; i++) {\r\n            const key = this.elt.attributes[i].name;\r\n            const value = this.elt.attributes[i].value;\r\n            if (DBNotation.isTwoWays(value)) {\r\n                this.scope[key] = DBNotation.scope.TWO_WAYS;\r\n            } else if (DBNotation.isOneWay(value)) {\r\n                this.scope[key] = DBNotation.scope.ONE_WAY;\r\n            } else if (DBNotation.isEvent(value)) {\r\n                this.scope[key] = DBNotation.scope.EVENT;\r\n            } else {\r\n                this.scope[key] = DBNotation.scope.LITTERAL;\r\n            }\r\n        }\r\n    }\r\n\r\n    getModelVar(attr) {\r\n        return DBNotation.extractModelVar(this.elt.getAttribute(attr));\r\n    }\r\n\r\n    connectedCallBack() {\r\n        this.initScope();\r\n        for (let attr in this.scope) {\r\n            if (this.scope[attr] === DBNotation.scope.LITTERAL) {\r\n                this.elt.setModel(`['${spinal2Camel(attr)}']`, this.elt.getAttribute(attr));\r\n                continue;\r\n            }\r\n\r\n            if (this.scope[attr] === DBNotation.scope.EVENT) {\r\n                this.elt.setEvent(spinal2Camel(attr), DBNotation.extractEventExpr(this.elt.getAttribute(attr)));\r\n                continue;\r\n            }\r\n\r\n            const modelVar = this.getModelVar(attr);\r\n            const parent = this.elt.getParent();\r\n            if (parent) {\r\n                parent.bindKey(modelVar, this.elt);\r\n            }\r\n            this.elt.onDigest(modelVar);\r\n        }\r\n        this.elt.askRendering();\r\n    }\r\n\r\n    disconnectedCallBack() {\r\n        const parent = this.elt.getParent();\r\n        if (parent) {\r\n            parent.unbind(this.elt);\r\n        }\r\n    }\r\n\r\n    onDigest(key) {\r\n        for (let attr in this.scope) {\r\n            if (this.scope[attr] === DBNotation.scope.LITTERAL) {\r\n                continue;\r\n            }\r\n            const modelVar = this.getModelVar(attr);\r\n            if (modelVar === key) {\r\n                const parentModelValue = this.elt.getParent().getModel(key);\r\n                this.elt.setModel(`['${spinal2Camel(attr)}']`, parentModelValue);\r\n            }\r\n        }\r\n        this.elt.askRendering();\r\n    }\r\n\r\n    digest(key) {\r\n        const attr = key.substring(2, key.length - 2);\r\n        if (attr in this.scope) {\r\n            if (this.scope[attr] === DBNotation.scope.LITTERAL) {\r\n                if (this.elt.getAttribute(attr) !== this.elt.getModel(spinal2Camel(key))) {\r\n                    this.elt.setAttribute(attr, this.elt.getModel(spinal2Camel(key)));\r\n                }\r\n            }\r\n            if (this.scope[attr] === DBNotation.scope.TWO_WAYS) {\r\n                const modelVar = this.getModelVar(attr);\r\n                this.elt.getParent().setModel(modelVar, this.elt.getModel(spinal2Camel(key)));\r\n            }\r\n        }\r\n        this.elt.askRendering();\r\n    }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/Databinding.js\n// module id = 5\n// module chunks = 0","import { camel2Spinal, dirname } from './functions.js';\r\nimport { DBNotation } from './DBNotation.js';\r\n\r\nexport class CircleBehavior {\r\n    static get tag() {\r\n        return camel2Spinal(this.name);\r\n    }\r\n    static reg() {\r\n        window.circle.behaviorRegistry[this.tag] = this;\r\n        return this;\r\n    }\r\n\r\n    constructor(elt) {\r\n        this.elt = elt;\r\n        this.host = elt.getRootNode().host;\r\n        this.value = this.elt.getAttribute(this.constructor.tag);\r\n        if (this.value.match(/^<.*>$/)) {\r\n            this.key = this.getModelVar(this.constructor.tag);\r\n            this.host.bindKey(this.key, this);\r\n            let k = this.key;\r\n            while (k) {\r\n                this.host.bindKey(k, this);\r\n                k = dirname(k);\r\n            }\r\n        }\r\n        this.init();\r\n        this.onDigest(this.key);\r\n    }\r\n\r\n    init() { }\r\n\r\n    getModelVar(attr) {\r\n        return DBNotation.extractModelVarFromBehavior(this.elt.getAttribute(attr));\r\n    }\r\n\r\n    onDigest() { }\r\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/circle/CircleBehavior.js\n// module id = 6\n// module chunks = 0"],"sourceRoot":""}