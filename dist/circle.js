"use strict"; function _possibleConstructorReturn(e, t) { if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return !t || "object" != typeof t && "function" != typeof t ? e : t } function _inherits(e, t) { if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t); e.prototype = Object.create(t && t.prototype, { constructor: { value: e, enumerable: !1, writable: !0, configurable: !0 } }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t) } function _classCallCheck(e, t) { if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function") } var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) { return typeof e } : function (e) { return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e }, _createClass = function () { function e(e, t) { for (var n = 0; n < t.length; n++) { var i = t[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i) } } return function (t, n, i) { return n && e(t.prototype, n), i && e(t, i), t } }(); !function () { function camel2Spinal(e) { return (e = e.replace(/^([A-Z]+)([A-Z][a-z])/g, "$1-$2")).replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase() } function spinal2Camel(e) { return e.replace(/(-[a-z])/g, function (e) { return e.toUpperCase().replace("-", "") }) } function dirname(e) { if (e.match(/\[/)) return e.replace(/^(.*)\[[^[]+?\]$/, "$1") } function basename(e) { return e.match(/\[/) ? e.replace(/^.*\['([^']+)'\]$/, "$1") : e } function parseAbsoluteKey(e) { return e.replace(/\.([^.]+)/g, "['$1']") } function isFirefox() { return null !== navigator.userAgent.match(/Firefox/) } function isEdge() { return null !== navigator.userAgent.match(/Edge/) } function parseExpr(e) { for (var t = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, !1), n = [], i = t.nextNode(); null !== i; i = t.nextNode())i.data.match(/{{(.*?)}}/g) && n.push(i); n.forEach(function (e) { var t = document.createElement("span"); t.innerHTML = e.data.replace(/{{(.*?)}}/g, function (e, t) { return '<circle-expr expr="[' + t + ']"></circle-expr>' }); var n = e.parentNode; n.insertBefore(t, e), n.removeChild(e) }) } function parseBehavior(e) { for (var t in window.circle.behaviorRegistry) !function (t) { e.querySelectorAll("[" + t + "]").forEach(function (e) { new window.circle.behaviorRegistry[t](e) }) }(t) } window.circle && console.warning("circle already loaded"); var doc = document.currentScript.ownerDocument, DBNotation = function () { function e() { _classCallCheck(this, e) } return _createClass(e, null, [{ key: "isTwoWays", value: function (e) { return e.match(/^\[\[.*\]\]$/) } }, { key: "isOneWay", value: function (e) { return e.match(/^\[.*\]$/) } }, { key: "isEvent", value: function (e) { return e.match(/^&/) } }, { key: "extractModelVar", value: function (e) { var t = e.replace(/^\[(.*?)\]$/g, "$1").replace(/^\[(.*?)\]$/g, "$1"); return t = parseAbsoluteKey(t) } }, { key: "extractEventExpr", value: function (e) { return e.substring(1) } }, { key: "scope", get: function () { return { TWO_WAYS: "=", ONE_WAY: "<", LITTERAL: "@", EVENT: "&" } } }]), e }(), Databinding = function () { function e(t) { _classCallCheck(this, e), this.elt = t, this.scope = {} } return _createClass(e, [{ key: "initScope", value: function () { for (var e = 0; e < this.elt.attributes.length; e++) { var t = this.elt.attributes[e].name, n = this.elt.attributes[e].value; DBNotation.isTwoWays(n) ? this.scope[t] = DBNotation.scope.TWO_WAYS : DBNotation.isOneWay(n) ? this.scope[t] = DBNotation.scope.ONE_WAY : DBNotation.isEvent(n) ? this.scope[t] = DBNotation.scope.EVENT : this.scope[t] = DBNotation.scope.LITTERAL } } }, { key: "getModelVar", value: function (e) { return DBNotation.extractModelVar(this.elt.getAttribute(e)) } }, { key: "connectedCallBack", value: function () { this.initScope(); for (var e in this.scope) if (this.scope[e] !== DBNotation.scope.LITTERAL) if (this.scope[e] !== DBNotation.scope.EVENT) { var t = this.getModelVar(e), n = this.elt.getParent(); n && n.bindKey(t, this.elt), this.elt.onDigest(t) } else this.elt.setEvent(spinal2Camel(e), DBNotation.extractEventExpr(this.elt.getAttribute(e))); else this.elt.setModel(spinal2Camel(e), this.elt.getAttribute(e)); this.elt.askRendering() } }, { key: "onDigest", value: function (e) { for (var t in this.scope) if (this.scope[t] !== DBNotation.scope.LITTERAL && this.getModelVar(t) === e) { var n = this.elt.getParent().getModel(e); this.elt.setModel(spinal2Camel(t), n) } this.elt.askRendering() } }, { key: "digest", value: function (e) { if (e in this.scope && (this.scope[e] === DBNotation.scope.LITTERAL && this.elt.getAttribute(e) !== this.elt.getModel(spinal2Camel(e)) && this.elt.setAttribute(e, this.elt.getModel(spinal2Camel(e))), this.scope[e] === DBNotation.scope.TWO_WAYS)) { var t = this.getModelVar(e); this.elt.getParent().setModel(t, this.elt.getModel(spinal2Camel(e))) } this.elt.askRendering() } }]), e }(), CircleProxyType = function e() { _classCallCheck(this, e) }, CircleElement = function (_HTMLElement) { function CircleElement() { function e(t) { return { set: function (i, r, o) { var s = t ? t + "['" + r + "']" : r; if (Array.isArray(i) && "length" === r) return !0; null === o || "object" !== (void 0 === o ? "undefined" : _typeof(o)) || o instanceof CircleProxyType ? i[r] = o : i[r] = new Proxy(o, e(s)), circle.digestId++; for (var a = s; a;)n.digest(a), a = dirname(a); return !0 }, deleteProperty: function (e, i) { return delete e[i], Array.isArray(e) && e.length-- , circle.digestId++ , n.digest(t), !0 }, getPrototypeOf: function (e) { return CircleProxyType.prototype } } } _classCallCheck(this, CircleElement); var t = _possibleConstructorReturn(this, (CircleElement.__proto__ || Object.getPrototypeOf(CircleElement)).call(this)), n = t; return t.event = {}, t.model = new Proxy({}, e()), t.digestRegistry = {}, t.templateSelector = "#" + t.constructor.tag, t.databinding = new Databinding(t), t.isRenderingAsked = !1, t } return _inherits(CircleElement, _HTMLElement), _createClass(CircleElement, [{ key: "attributeChangedCallback", value: function (e, t, n) { this.setModel(spinal2Camel(e), n) } }], [{ key: "tag", get: function () { return camel2Spinal(this.name) } }, { key: "reg", get: function () { window.customElements.define(this.tag, this) } }, { key: "observedAttributes", get: function () { return this._oa } }, { key: "oa", set: function (e) { this._oa = e } }]), _createClass(CircleElement, [{ key: "getParent", value: function () { return this.getRootNode().host } }, { key: "connectedCallback", value: function () { this.root = this.root || this.attachShadow({ mode: "open" }), this.myDoc = isFirefox() || isEdge() || null === document.currentScript ? doc : document.currentScript.ownerDocument; var e = this.myDoc.querySelector(this.templateSelector); if (e) { var t = document.importNode(e.content, !0); parseExpr(t), this.root.innerHTML = "", this.root.appendChild(t), parseBehavior(this.root) } this.databinding.connectedCallBack(), this.init() } }, { key: "init", value: function () { } }, { key: "askRendering", value: function () { var e = this; this.isRenderingAsked || (this.isRenderingAsked = !0, setTimeout(function () { e.render(), e.isRenderingAsked = !1 }, 0)) } }, { key: "render", value: function () { } }, { key: "onDigest", value: function (e) { this.databinding.onDigest(e) } }, { key: "bindKey", value: function (e, t) { var n = this.digestRegistry; void 0 === n[e] ? n[e] = [t] : n[e].push(t) } }, { key: "digest", value: function (e) { this.digestRegistry[e] && this.digestRegistry[e].forEach(function (t, n) { t.onDigest(e) }), this.databinding.digest(e) } }, { key: "getModel", value: function getModel(absoluteKey) { var k = dirname(absoluteKey); k && "object" !== _typeof(this.getModel(k)) && this.setModel(k, {}); var prefix = absoluteKey.startsWith("[") ? "this.model" : "this.model.", str = prefix + absoluteKey; return eval(str) } }, { key: "hasModel", value: function (e) { var t = dirname(e), n = basename(e); return t ? this.hasModel(t) && n in this.getModel(t) : n in this.model } }, { key: "setModel", value: function setModel(absoluteKey, value) { if (this.getModel(absoluteKey) !== value) { var str = "this.model." + absoluteKey + " = value"; eval(str) } } }, { key: "setEvent", value: function setEvent(attr, value) { this.event[attr] = function () { return eval(value) } } }]), CircleElement }(HTMLElement), CircleBehavior = function () { function e(t) { _classCallCheck(this, e), this.elt = t, this.host = t.getRootNode().host, this.key = this.getModelVar(this.constructor.tag), this.init(), this.host.bindKey(this.key, this); for (var n = this.key; n;)this.host.bindKey(n, this), n = dirname(n); this.onDigest(this.key) } return _createClass(e, null, [{ key: "tag", get: function () { return camel2Spinal(this.name) } }, { key: "reg", get: function () { window.circle.behaviorRegistry[this.tag] = this } }]), _createClass(e, [{ key: "init", value: function () { } }, { key: "getModelVar", value: function (e) { return DBNotation.extractModelVar(this.elt.getAttribute(e)) } }, { key: "onDigest", value: function () { } }]), e }(), Circle = function () { function e() { _classCallCheck(this, e), this.Element = CircleElement, this.Behavior = CircleBehavior, this.digestId = 0, this.dependancyInjectionRegistry = {}, this.behaviorRegistry = {} } return _createClass(e, [{ key: "stackTrace", value: function () { return (new Error).stack } }, { key: "di", value: function (e, t) { return arguments.length > 1 && (this.dependancyInjectionRegistry[e] = t), this.dependancyInjectionRegistry[e] } }]), e }(); window.o = function (e, t) { if (void 0 === t) return e.getRootNode().host; for (var n = e.getRootNode().host; n.constructor.tag !== t;)if (!(n = n.getRootNode().host)) throw new Error("circle.wc: cannot find a component with tag " + t); return n }, Object.setPrototypeOf(window.o, new Circle), window.circle = window.o; var CircleExpr = function (e) { function t() { return _classCallCheck(this, t), _possibleConstructorReturn(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments)) } return _inherits(t, CircleElement), _createClass(t, [{ key: "render", value: function () { var e = void 0 === this.model.expr ? "" : this.model.expr; e = "object" === (void 0 === e ? "undefined" : _typeof(e)) ? JSON.stringify(e) : e, this.root.innerHTML = e } }]), t }(); CircleExpr.reg }();