{"version":3,"sources":["circle.js"],"names":["camel2Spinal","str","replace","toLowerCase","spinal2Camel","$1","toUpperCase","dirname","absoluteKey","match","basename","parseAbsoluteKey","key","isFirefox","navigator","userAgent","isEdge","parseExpr","elt","walk","document","createTreeWalker","NodeFilter","SHOW_TEXT","array","node","nextNode","data","push","forEach","replacementNode","createElement","innerHTML","name","parentNode","insertBefore","removeChild","parseBehavior","rootElt","tag","window","circle","behaviorRegistry","querySelectorAll","console","warning","doc","currentScript","ownerDocument","DBNotation","[object Object]","value","expr","substring","x","v","B","D","N","Databinding","circleElement","this","scope","i","attributes","length","isTwoWays","TWO_WAYS","isOneWay","ONE_WAY","isEvent","EVENT","LITTERAL","attr","extractModelVar","getAttribute","initScope","setModel","setEvent","extractEventExpr","modelVar","getModelVar","parent","getParent","bindKey","onDigest","askRendering","parentModelValue","getModel","setAttribute","CircleProxyType","CircleElement","HTMLElement","R","Y","customElements","define","I","_oa","q","oldValue","newValue","handler","parentKey","target","Array","isArray","Proxy","digestId","log","self","constructor","stackTrace","k","digest","deleteProperty","getPrototypeOf","prototype","super","event","model","digestRegistry","templateSelector","databinding","isRenderingAsked","getRootNode","host","root","attachShadow","lt","myDoc","t","querySelector","clone","importNode","content","appendChild","connectedCallBack","init","setTimeout","render","undefined","index","prefix","startsWith","eval","b","hasModel","CircleBehavior","Circle","Element","Behavior","dependancyInjectionRegistry","Error","stack","di","arguments","o","element","Object","setPrototypeOf","CircleExpr","JSON","stringify","reg"],"mappings":"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","file":"circle.min.js","sourcesContent":["(function () {\r\n\t'use strict';\r\n\r\n\tif (window.circle) { console.warning('circle already loaded'); }\r\n\r\n\t// Firefox and Edge does not understand well currentScript after init.\r\n\t// So we keep this pointer for later.\r\n\tconst doc = document.currentScript.ownerDocument;\r\n\r\n\t/**\r\n\t * Translate a string from CamelCase to spinal-case.\r\n\t * Note: works well with SPECIALCamelCase as well.\r\n\t * \r\n\t * @param {string} str - CamelCase string\r\n\t * @returns spinal-case equivalent string.\r\n\t */\r\n\tfunction camel2Spinal(str) {\r\n\t\t// handle case like JLGStars becoming jlg-stars\r\n\t\tstr = str.replace(/^([A-Z]+)([A-Z][a-z])/g, '$1-$2');\r\n\t\t// then do the traditional conversion to spinal case.\r\n\t\treturn str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n\t}\r\n\r\n\tfunction spinal2Camel(str) {\r\n\t\treturn str.replace(/(-[a-z])/g, function ($1) { return $1.toUpperCase().replace('-', ''); });\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the parent key\r\n\t * Ex: \r\n\t * hello['world']['toto'] becomes hello['world']\r\n\t * hello['world'] becomes hello\r\n\t * hello becomes undefined\r\n\t * \r\n\t * @param {any} absoluteKey \r\n\t * @returns \r\n\t */\r\n\tfunction dirname(absoluteKey) {\r\n\t\tif (absoluteKey.match(/\\[/)) {\r\n\t\t\treturn absoluteKey.replace(/^(.*)\\[[^[]+?\\]$/, '$1');\r\n\t\t}\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\t/**\r\n\t * Return the last key\r\n\t * Ex: \r\n\t * hello['world']['toto'] becomes toto\r\n\t * hello['world'] becomes world\r\n\t * hello becomes hello\r\n\t * \r\n\t * @param {any} absoluteKey \r\n\t * @returns \r\n\t */\r\n\tfunction basename(absoluteKey) {\r\n\t\tif (absoluteKey.match(/\\[/)) {\r\n\t\t\treturn absoluteKey.replace(/^.*\\['([^']+)'\\]$/, '$1');\r\n\t\t}\r\n\t\treturn absoluteKey;\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms hello.world[3].foo.bar in hello['world'][3]['foo']['bar']\r\n\t * \r\n\t * \r\n\t * @param {any} key \r\n\t * @returns \r\n\t */\r\n\tfunction parseAbsoluteKey(key) {\r\n\t\treturn key.replace(/\\.([^.]+)/g, '[\\'$1\\']');\r\n\t}\r\n\r\n\t/**\r\n\t * check if the user agent is Firefox\r\n\t * \r\n\t * @returns true if user agent is Firefox, false otherwise.\r\n\t */\r\n\tfunction isFirefox() {\r\n\t\treturn navigator.userAgent.match(/Firefox/) !== null;\r\n\t}\r\n\r\n\t/**\r\n\t * check if the user agent is Microsoft Edge\r\n\t * \r\n\t * @returns true if user agent is Edge, false otherwise.\r\n\t */\r\n\tfunction isEdge() {\r\n\t\treturn navigator.userAgent.match(/Edge/) !== null;\r\n\t}\r\n\r\n\t/**\r\n\t * We want the user be able to easily insert expression like in AngularJS.\r\n\t * But internally, the {{myModelVar}} must be converted to <circle-expr expr=\"[myModelVar]\"></circle-expr>\r\n\t * \r\n\t * @param {any} elt \r\n\t */\r\n\tfunction parseExpr(elt) {\r\n\t\tconst walk = document.createTreeWalker(elt, NodeFilter.SHOW_TEXT, null, false);\r\n\t\tlet array = [];\r\n\t\tfor (let node = walk.nextNode(); node !== null; node = walk.nextNode()) {\r\n\t\t\tif (node.data.match(/{{(.*?)}}/g)) {\r\n\t\t\t\tarray.push(node);\r\n\t\t\t}\r\n\t\t}\r\n\t\tarray.forEach((node) => {\r\n\t\t\tconst replacementNode = document.createElement('span');\r\n\t\t\treplacementNode.innerHTML = node.data.replace(/{{(.*?)}}/g, (match, name) => {\r\n\t\t\t\treturn `<circle-expr expr=\"[${name}]\"></circle-expr>`;\r\n\t\t\t});\r\n\t\t\tconst parentNode = node.parentNode;\r\n\t\t\tparentNode.insertBefore(replacementNode, node);\r\n\t\t\tparentNode.removeChild(node);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction parseBehavior(rootElt) {\r\n\t\tfor (let tag in window.circle.behaviorRegistry) {\r\n\t\t\trootElt.querySelectorAll(`[${tag}]`).forEach(elt => {\r\n\t\t\t\tnew window.circle.behaviorRegistry[tag](elt);\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Class in charge of managing the databinding notation:\r\n\t * [] for one way databinding\r\n\t * [[]] for two way databinding\r\n\t * & for event databinding\r\n\t * For internal scope notation (Angular like: '@' for litteral, '<' for simple DB,\r\n\t * '=' for 2 way DB, '&' for event DB)\r\n\t * \r\n\t * @class DBNotation\r\n\t */\r\n\tclass DBNotation {\r\n\t\t/**\r\n\t\t * Tests if the notation is a 2 ways data binding.\r\n\t\t * Notation is for the time being: [[...]]\r\n\t\t * \r\n\t\t * @param {any} value \r\n\t\t * @returns \r\n\t\t */\r\n\t\tstatic isTwoWays(value) {\r\n\t\t\treturn value.match(/^\\[\\[.*\\]\\]$/);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Tests if the notation is a 1 way data binding.\r\n\t\t * Notation is for the time being: [...]\r\n\t\t * \r\n\t\t * @param {any} value \r\n\t\t * @returns \r\n\t\t */\r\n\t\tstatic isOneWay(value) {\r\n\t\t\treturn value.match(/^\\[.*\\]$/);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Test if the notation is a event databinding\r\n\t\t * Notation is for the time being: &...\r\n\t\t * \r\n\t\t * @static\r\n\t\t * @param {any} value \r\n\t\t * @returns \r\n\t\t * @memberof DBNotation\r\n\t\t */\r\n\t\tstatic isEvent(value) {\r\n\t\t\treturn value.match(/^&/);\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * removes the [] or [[]].\r\n\t\t * \r\n\t\t * @static\r\n\t\t * @param {any} value \r\n\t\t * @returns \r\n\t\t * @memberof DBNotation\r\n\t\t */\r\n\t\tstatic extractModelVar(value) {\r\n\t\t\tlet expr = value.replace(/^\\[(.*?)\\]$/g, '$1').replace(/^\\[(.*?)\\]$/g, '$1');\r\n\t\t\texpr = parseAbsoluteKey(expr);\r\n\t\t\treturn expr;\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * Removes the starting &.\r\n\t\t * \r\n\t\t * @static\r\n\t\t * @param {any} value \r\n\t\t * @returns \r\n\t\t * @memberof DBNotation\r\n\t\t */\r\n\t\tstatic extractEventExpr(value) {\r\n\t\t\treturn value.substring(1);\r\n\t\t}\r\n\r\n\t\tstatic get scope() {\r\n\t\t\treturn {\r\n\t\t\t\tTWO_WAYS: '=',\r\n\t\t\t\tONE_WAY: '<',\r\n\t\t\t\tLITTERAL: '@',\r\n\t\t\t\tEVENT: '&'\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\r\n\tclass Databinding {\r\n\t\tconstructor(circleElement) {\r\n\t\t\tthis.elt = circleElement;\r\n\t\t\tthis.scope = {};\r\n\t\t}\r\n\r\n\t\tinitScope() {\r\n\t\t\tfor (let i = 0; i < this.elt.attributes.length; i++) {\r\n\t\t\t\tconst key = this.elt.attributes[i].name;\r\n\t\t\t\tconst value = this.elt.attributes[i].value;\r\n\t\t\t\tif (DBNotation.isTwoWays(value)) {\r\n\t\t\t\t\tthis.scope[key] = DBNotation.scope.TWO_WAYS;\r\n\t\t\t\t} else if (DBNotation.isOneWay(value)) {\r\n\t\t\t\t\tthis.scope[key] = DBNotation.scope.ONE_WAY;\r\n\t\t\t\t} else if (DBNotation.isEvent(value)) {\r\n\t\t\t\t\tthis.scope[key] = DBNotation.scope.EVENT;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.scope[key] = DBNotation.scope.LITTERAL;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgetModelVar(attr) {\r\n\t\t\treturn DBNotation.extractModelVar(this.elt.getAttribute(attr));\r\n\t\t}\r\n\r\n\t\tconnectedCallBack() {\r\n\t\t\tthis.initScope();\r\n\t\t\tfor (let attr in this.scope) {\r\n\t\t\t\tif (this.scope[attr] === DBNotation.scope.LITTERAL) {\r\n\t\t\t\t\tthis.elt.setModel(spinal2Camel(attr), this.elt.getAttribute(attr));\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.scope[attr] === DBNotation.scope.EVENT) {\r\n\t\t\t\t\tthis.elt.setEvent(spinal2Camel(attr), DBNotation.extractEventExpr(this.elt.getAttribute(attr)));\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst modelVar = this.getModelVar(attr);\r\n\t\t\t\tconst parent = this.elt.getParent();\r\n\t\t\t\tif (parent) {\r\n\t\t\t\t\tparent.bindKey(modelVar, this.elt);\r\n\t\t\t\t}\r\n\t\t\t\tthis.elt.onDigest(modelVar);\r\n\t\t\t}\r\n\t\t\tthis.elt.askRendering();\r\n\t\t}\r\n\r\n\t\tonDigest(key) {\r\n\t\t\tfor (let attr in this.scope) {\r\n\t\t\t\tif (this.scope[attr] === DBNotation.scope.LITTERAL) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tconst modelVar = this.getModelVar(attr);\r\n\t\t\t\tif (modelVar === key) {\r\n\t\t\t\t\tconst parentModelValue = this.elt.getParent().getModel(key);\r\n\t\t\t\t\tthis.elt.setModel(spinal2Camel(attr), parentModelValue);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.elt.askRendering();\r\n\t\t}\r\n\r\n\t\tdigest(key) {\r\n\t\t\tif (key in this.scope) {\r\n\t\t\t\tif (this.scope[key] === DBNotation.scope.LITTERAL) {\r\n\t\t\t\t\tif (this.elt.getAttribute(key) !== this.elt.getModel(spinal2Camel(key))) {\r\n\t\t\t\t\t\tthis.elt.setAttribute(key, this.elt.getModel(spinal2Camel(key)));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.scope[key] === DBNotation.scope.TWO_WAYS) {\r\n\t\t\t\t\tconst modelVar = this.getModelVar(key);\r\n\t\t\t\t\tthis.elt.getParent().setModel(modelVar, this.elt.getModel(spinal2Camel(key)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.elt.askRendering();\r\n\t\t}\r\n\t}\r\n\r\n\tclass CircleProxyType { }\r\n\r\n\t/**\r\n\t * A component in circle must extends the circle.Element class\r\n\t * which is a pointer on the CircleElement class.\r\n\t * \r\n\t * @class CircleElement\r\n\t * @extends {HTMLElement}\r\n\t */\r\n\tclass CircleElement extends HTMLElement {\r\n\t\tstatic get tag() {\r\n\t\t\treturn camel2Spinal(this.name);\r\n\t\t}\r\n\t\tstatic get reg() {\r\n\t\t\twindow.customElements.define(this.tag, this);\r\n\t\t}\r\n\r\n\t\tstatic get observedAttributes() {\r\n\t\t\treturn this._oa;\r\n\t\t}\r\n\r\n\t\tstatic set oa(value) {\r\n\t\t\tthis._oa = value;\r\n\t\t}\r\n\r\n\t\tattributeChangedCallback(attr, oldValue, newValue) {\r\n\t\t\tthis.setModel(spinal2Camel(attr), newValue);\r\n\t\t}\r\n\t\tconstructor() {\r\n\t\t\tsuper();\r\n\t\t\tconst self = this;\r\n\r\n\t\t\tfunction handler(parentKey) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tset(target, key, value) {\r\n\t\t\t\t\t\tconst absoluteKey = (parentKey) ? `${parentKey}['${key}']` : key;\r\n\t\t\t\t\t\tif (Array.isArray(target)) {\r\n\t\t\t\t\t\t\tif (key === 'length') {\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (value !== null && typeof value === 'object' && !(value instanceof CircleProxyType)) {\r\n\t\t\t\t\t\t\ttarget[key] = new Proxy(value, handler(absoluteKey));\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttarget[key] = value;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcircle.digestId++;\r\n\t\t\t\t\t\tconsole.log('%d: %s: update %s to %s',\r\n\t\t\t\t\t\t\tcircle.digestId, self.constructor.name, absoluteKey, value, circle.stackTrace());\r\n\t\t\t\t\t\tlet k = absoluteKey;\r\n\t\t\t\t\t\twhile (k) {\r\n\t\t\t\t\t\t\tself.digest(k);\r\n\t\t\t\t\t\t\tk = dirname(k);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tdeleteProperty(target, key) {\r\n\t\t\t\t\t\tdelete target[key];\r\n\t\t\t\t\t\tif (Array.isArray(target)) {\r\n\t\t\t\t\t\t\ttarget.length--;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcircle.digestId++;\r\n\t\t\t\t\t\t// console.log('%d: %s: delete %s',\r\n\t\t\t\t\t\t// \tcircle.digestId, self.constructor.name, absoluteKey, circle.stackTrace());\r\n\t\t\t\t\t\tself.digest(parentKey);\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetPrototypeOf: function (key) {\r\n\t\t\t\t\t\treturn CircleProxyType.prototype;\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\r\n\t\t\tthis.event = {};\r\n\t\t\tthis.model = new Proxy({}, handler());\r\n\t\t\tthis.digestRegistry = {};\r\n\t\t\tthis.templateSelector = '#' + this.constructor.tag;\r\n\t\t\tthis.databinding = new Databinding(this);\r\n\t\t\tthis.isRenderingAsked = false;\r\n\t\t}\r\n\r\n\t\tgetParent() {\r\n\t\t\treturn this.getRootNode().host;\r\n\t\t}\r\n\r\n\t\tconnectedCallback() {\r\n\t\t\tthis.root = this.root || this.attachShadow({\r\n\t\t\t\t// see https://developers.google.com/web/fundamentals/architecture/building-components/shadowdom\r\n\t\t\t\t// Eric B. explain why it is better to use open mode.\r\n\t\t\t\tmode: 'open'\r\n\t\t\t});\r\n\t\t\tthis.myDoc = (isFirefox() || isEdge() || (document.currentScript === null)) ?\r\n\t\t\t\tdoc : document.currentScript.ownerDocument;\r\n\r\n\t\t\tconst t = this.myDoc.querySelector(this.templateSelector);\r\n\t\t\tif (t) {\r\n\t\t\t\tconst clone = document.importNode(t.content, true);\r\n\t\t\t\tparseExpr(clone);\r\n\t\t\t\tthis.root.innerHTML = '';\r\n\t\t\t\tthis.root.appendChild(clone);\r\n\t\t\t\tparseBehavior(this.root);\r\n\t\t\t}\r\n\t\t\tthis.databinding.connectedCallBack();\r\n\t\t\tthis.init();\r\n\t\t}\r\n\r\n\t\tinit() { }\r\n\r\n\t\taskRendering() {\r\n\t\t\tif (!this.isRenderingAsked) {\r\n\t\t\t\tthis.isRenderingAsked = true;\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.render();\r\n\t\t\t\t\tthis.isRenderingAsked = false;\r\n\t\t\t\t}, 0);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\trender() { }\r\n\r\n\t\tonDigest(key) {\r\n\t\t\tthis.databinding.onDigest(key);\r\n\t\t}\r\n\t\tbindKey(key, elt) {\r\n\t\t\tconst digestRegistry = this.digestRegistry;\r\n\t\t\tif (digestRegistry[key] === undefined) {\r\n\t\t\t\tdigestRegistry[key] = [elt];\r\n\t\t\t} else {\r\n\t\t\t\tdigestRegistry[key].push(elt);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdigest(key) {\r\n\t\t\tif (this.digestRegistry[key]) {\r\n\t\t\t\tthis.digestRegistry[key].forEach((elt, index) => {\r\n\t\t\t\t\telt.onDigest(key);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.databinding.digest(key);\r\n\t\t}\r\n\r\n\t\tgetModel(absoluteKey) {\r\n\t\t\tconst k = dirname(absoluteKey);\r\n\t\t\tif (k && (typeof this.getModel(k) !== 'object')) {\r\n\t\t\t\tthis.setModel(k, {});\r\n\t\t\t}\r\n\t\t\tconst prefix = (absoluteKey.startsWith('[')) ? 'this.model' : 'this.model.';\r\n\t\t\tconst str = prefix + absoluteKey;\r\n\t\t\treturn eval(str);\r\n\t\t}\r\n\r\n\t\thasModel(absoluteKey) {\r\n\t\t\tconst k = dirname(absoluteKey);\r\n\t\t\tconst b = basename(absoluteKey);\r\n\t\t\tif (k) {\r\n\t\t\t\treturn this.hasModel(k) && (b in this.getModel(k));\r\n\t\t\t}\r\n\t\t\treturn b in this.model;\r\n\t\t}\r\n\r\n\t\tsetModel(absoluteKey, value) {\r\n\t\t\tif (this.getModel(absoluteKey) === value) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst str = 'this.model.' + absoluteKey + ' = value';\r\n\t\t\teval(str);\r\n\t\t}\r\n\r\n\t\tsetEvent(attr, value) {\r\n\t\t\tthis.event[attr] = () => eval(value);\r\n\t\t}\r\n\t}\r\n\r\n\tclass CircleBehavior {\r\n\t\tstatic get tag() {\r\n\t\t\treturn camel2Spinal(this.name);\r\n\t\t}\r\n\t\tstatic get reg() {\r\n\t\t\twindow.circle.behaviorRegistry[this.tag] = this;\r\n\t\t}\r\n\r\n\t\tconstructor(elt) {\r\n\t\t\tthis.elt = elt;\r\n\t\t\tthis.host = elt.getRootNode().host;\r\n\t\t\tthis.key = this.getModelVar(this.constructor.tag);\r\n\t\t\tthis.init();\r\n\r\n\t\t\tthis.host.bindKey(this.key, this);\r\n\t\t\tlet k = this.key;\r\n\t\t\twhile (k) {\r\n\t\t\t\tthis.host.bindKey(k, this);\r\n\t\t\t\tk = dirname(k);\r\n\t\t\t}\r\n\t\t\tthis.onDigest(this.key);\r\n\t\t}\r\n\r\n\t\tinit() { }\r\n\r\n\t\tgetModelVar(attr) {\r\n\t\t\treturn DBNotation.extractModelVar(this.elt.getAttribute(attr));\r\n\t\t}\r\n\r\n\t\tonDigest() { }\r\n\t}\r\n\r\n\t/**\r\n\t * The Circle class is the exposed class of the library.\r\n\t * The circle.js produces a global variable window.circle which is the hook\r\n\t * to all functionalities of this library.\r\n\t * \r\n\t * @class Circle\r\n\t */\r\n\tclass Circle {\r\n\t\tconstructor() {\r\n\t\t\tthis.Element = CircleElement;\r\n\t\t\tthis.Behavior = CircleBehavior;\r\n\t\t\tthis.digestId = 0;\r\n\t\t\tthis.dependancyInjectionRegistry = {};\r\n\t\t\tthis.behaviorRegistry = {};\r\n\t\t}\r\n\r\n\t\tstackTrace() {\r\n\t\t\tvar err = new Error();\r\n\t\t\treturn err.stack;\r\n\t\t}\r\n\r\n\t\tdi(str, di) {\r\n\t\t\tif (arguments.length > 1) {\r\n\t\t\t\tthis.dependancyInjectionRegistry[str] = di;\r\n\t\t\t}\r\n\t\t\treturn this.dependancyInjectionRegistry[str];\r\n\t\t}\r\n\t}\r\n\twindow.o = function (element, tag) {\r\n\t\tif (tag === undefined) {\r\n\t\t\treturn element.getRootNode().host;\r\n\t\t}\r\n\t\tlet host = element.getRootNode().host;\r\n\t\twhile (host.constructor.tag !== tag) {\r\n\t\t\thost = host.getRootNode().host;\r\n\t\t\tif (!host) {\r\n\t\t\t\tthrow new Error('circle.wc: cannot find a component with tag ' + tag);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn host;\r\n\t};\r\n\tObject.setPrototypeOf(window.o, new Circle());\r\n\twindow.circle = window.o;\r\n\r\n\t/**\r\n\t * CircleExpr is the component that allows displaying expressions.\r\n\t * \r\n\t * @class CircleExpr\r\n\t * @extends {circle.Element}\r\n\t */\r\n\tclass CircleExpr extends CircleElement {\r\n\t\trender() {\r\n\t\t\tlet str = (this.model.expr === undefined) ? '' : this.model.expr;\r\n\t\t\tstr = (typeof str === 'object') ? JSON.stringify(str) : str;\r\n\t\t\tthis.root.innerHTML = str;\r\n\t\t}\r\n\t}\r\n\tCircleExpr.reg;\r\n})();\r\n"]}